import Button from "../../../../components/common/Button/Button";
import Card from "../../../../components/common/Card/Card";
import Badge from "../../../../components/common/Badge/Badge";
import "./PaymentsList.css";

export default function PaymentsList({
                                         project,
                                         payments,
                                         loading,
                                         error,
                                         onAddPayment,    // —Ñ—É–Ω–∫—Ü—ñ—è(project)
                                         onEditPayment,   // —Ñ—É–Ω–∫—Ü—ñ—è(payment, project)
                                         onDeletePayment  // —Ñ—É–Ω–∫—Ü—ñ—è(payment)
                                     }) {
    const calculateTotals = () => {
        let income = 0, expenses = 0;
        payments.forEach(p => {
            const amount = parseFloat(p.paymentSum);
            if (amount > 0) income += amount;
            else expenses += Math.abs(amount);
        });
        return {
            income: income.toFixed(2),
            expenses: expenses.toFixed(2),
            balance: (income - expenses).toFixed(2)
        };
    };

    const totals = calculateTotals();
    const projectCost = parseFloat(project?.cost || 0);
    const netProfit = (parseFloat(totals.income) - parseFloat(totals.expenses) - projectCost).toFixed(2);

    const formatDate = (date) => date ? new Date(date).toLocaleDateString("uk-UA") : "‚Äî";
    const sortedPayments = [...payments].sort((a, b) => new Date(b.paymentDate) - new Date(a.paymentDate));

    const isPaymentOlderThan90Days = (paymentDate) => {
        if (!paymentDate) return false;

        const paymentTime = new Date(paymentDate).getTime();
        const ninetyDaysAgo = new Date();
        ninetyDaysAgo.setDate(ninetyDaysAgo.getDate() - 90);

        return paymentTime < ninetyDaysAgo.getTime();
    };

    return (
        <div className="payments-container">
            <div className="payments-header">
                <div className="header-title">
                    <h1>–ü–ª–∞—Ç–µ–∂—ñ –ø—Ä–æ—î–∫—Ç—É</h1>
                    <p className="project-name">{project?.name}</p>
                </div>
                <div className="header-actions">
                    <Button
                        variant="primary"
                        size="medium"
                        icon="üí∞"
                        onClick={() => onAddPayment?.(project)}
                    >
                        –î–æ–¥–∞—Ç–∏ –ø–ª–∞—Ç—ñ–∂
                    </Button>
                </div>
            </div>

            <div className="finance-summary small">
                <Card className="summary-card income">
                    <div className="summary-icon">üíµ</div>
                    <div className="summary-content">
                        <div className="summary-label">–ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è</div>
                        <div className="summary-value">${totals.income}</div>
                    </div>
                </Card>
                <Card className="summary-card expenses">
                    <div className="summary-icon">üí∏</div>
                    <div className="summary-content">
                        <div className="summary-label">–í–∏—Ç—Ä–∞—Ç–∏</div>
                        <div className="summary-value">${totals.expenses}</div>
                    </div>
                </Card>
                <Card className="summary-card balance">
                    <div className="summary-icon">üìä</div>
                    <div className="summary-content">
                        <div className="summary-label">–ë–∞–ª–∞–Ω—Å</div>
                        <div className={`summary-value ${parseFloat(totals.balance) < 0 ? 'negative' : ''}`}>
                            ${totals.balance}
                        </div>
                    </div>
                </Card>
                <Card className="summary-card balance">
                    <div className="summary-icon">üìà</div>
                    <div className="summary-content">
                        <div className="summary-label">–ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫</div>
                        <div className={`summary-value ${netProfit < 0 ? 'negative' : ''}`}>
                            ${netProfit}
                        </div>
                    </div>
                </Card>
            </div>

            {loading ? (
                <div className="loading-message">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—ñ–≤...</div>
            ) : error ? (
                <div className="error-message">–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ: {error.message}</div>
            ) : (
                <div className="payments-list">
                    <div className="payments-header-row" style={{ gridTemplateColumns: '100px 120px 1fr 120px 120px 160px' }}>
                        <div className="payment-date-col">–î–∞—Ç–∞</div>
                        <div className="payment-purpose-col">–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è</div>
                        <div className="payment-description-col">–û–ø–∏—Å</div>
                        <div className="payment-amount-col">–°—É–º–∞</div>
                        <div className="payment-delta-col">Œî –¥–æ –≤–∞—Ä—Ç–æ—Å—Ç—ñ</div>
                        <div className="payment-actions-col">–î—ñ—ó</div>
                    </div>

                    {sortedPayments.length > 0 ? (
                        sortedPayments.map(payment => {
                            const isOlderThan90Days = isPaymentOlderThan90Days(payment.paymentDate);

                            return (
                                <div
                                    key={payment.id}
                                    className={`payment-row ${parseFloat(payment.paymentSum) < 0 ? 'expense' : 'income'} ${isOlderThan90Days ? 'historical-payment' : ''}`}
                                    style={{ gridTemplateColumns: '100px 120px 1fr 120px 120px 160px' }}
                                    title={`–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è ‚Ññ: ${payment.transactionNumber}\n–°—Ç–≤–æ—Ä–µ–Ω–æ: ${formatDate(payment.createDatetime)}\n–û–Ω–æ–≤–ª–µ–Ω–æ: ${formatDate(payment.updateDatetime)}${isOlderThan90Days ? '\n–¶–µ–π –ø–ª–∞—Ç—ñ–∂ —Å—Ç–∞—Ä—à–∏–π –∑–∞ 90 –¥–Ω—ñ–≤ —ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –∑–º—ñ–Ω–µ–Ω–∏–π –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π' : ''}`}
                                >
                                    <div className="payment-date-col">{formatDate(payment.paymentDate)}</div>
                                    <div className="payment-purpose-col">
                                        <Badge
                                            variant={parseFloat(payment.paymentSum) < 0 ? 'warning' : 'success'}
                                            size="small"
                                        >
                                            {payment.paymentPurpose?.name || "‚Äî"}
                                        </Badge>
                                    </div>
                                    <div className="payment-description-col">{payment.transactionNumber || "‚Äî"}</div>
                                    <div className="payment-amount-col">
                                        <span className={parseFloat(payment.paymentSum) < 0 ? 'negative' : 'positive'}>
                                            ${Math.abs(parseFloat(payment.paymentSum)).toFixed(2)}
                                        </span>
                                    </div>
                                    <div className="payment-delta-col">
                                        ${(parseFloat(payment.paymentSum) - projectCost).toFixed(2)}
                                    </div>
                                    <div className="payment-actions-col">
                                        <Button
                                            variant="outline"
                                            size="small"
                                            icon="‚úèÔ∏è"
                                            onClick={() => onEditPayment?.(payment, project)}
                                            className="edit-button"
                                            disabled={isOlderThan90Days}
                                        >
                                            –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                                        </Button>
                                        <Button
                                            variant="danger"
                                            size="small"
                                            icon="üóë"
                                            onClick={() => onDeletePayment(payment)}
                                            className="delete-button"
                                            disabled={isOlderThan90Days}
                                        >
                                            –í–∏–¥–∞–ª–∏—Ç–∏
                                        </Button>
                                    </div>
                                </div>
                            );
                        })
                    ) : (
                        <Card className="empty-state-card">
                            <div className="no-payments-message">
                                –î–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É —â–µ –Ω–µ–º–∞—î –ø–ª–∞—Ç–µ–∂—ñ–≤. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–î–æ–¥–∞—Ç–∏ –ø–ª–∞—Ç—ñ–∂", —â–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π.
                            </div>
                        </Card>
                    )}
                </div>
            )}
        </div>
    );
}
