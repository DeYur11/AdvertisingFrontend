// src/pages/WorkerTasks/components/AddMaterialForm/AddMaterialForm.jsx
import { useState } from "react";
import { useQuery, useMutation, gql } from "@apollo/client";
import SelectWithCreate from "../../../../components/common/SelectWithCreate";
import CreatableSelect from "react-select/creatable";
import { executeMutation } from "../../../../utils/ErrorHandlingUtils";

// --- –ó–∞–ø–∏—Ç –¥–æ–≤—ñ–¥–Ω–∏–∫—ñ–≤ ---
const GET_MATERIAL_REFERENCE_DATA = gql`
    query GetMaterialReferenceData {
        materialTypes { id name }
        licenceTypes { id name }
        usageRestrictions { id name }
        targetAudiences { id name }
        languages { id name }
        keywords { id name }
    }
`;

// --- –ú—É—Ç–∞—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ ---
const CREATE_MATERIAL_TYPE = gql`
    mutation($input: CreateMaterialTypeInput!) {
        createMaterialType(input: $input) {
            id
            name
        }
    }
`;

const CREATE_LICENCE_TYPE = gql`
    mutation($input: CreateLicenceTypeInput!) {
        createLicenceType(input: $input) {
            id
            name
        }
    }
`;

const CREATE_USAGE_RESTRICTION = gql`
    mutation($input: CreateUsageRestrictionInput!) {
        createUsageRestriction(input: $input) {
            id
            description
        }
    }
`;

const CREATE_TARGET_AUDIENCE = gql`
    mutation($input: CreateTargetAudienceInput!) {
        createTargetAudience(input: $input) {
            id
            name
        }
    }
`;

const CREATE_LANGUAGE = gql`
    mutation($input: CreateLanguageInput!) {
        createLanguage(input: $input) {
            id
            name
        }
    }
`;

const CREATE_KEYWORD = gql`
    mutation($input: CreateKeywordInput!) {
        createKeyword(input: $input) {
            id
            name
        }
    }
`;

// --- –ú—É—Ç–∞—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É ---
const CREATE_MATERIAL = gql`
    mutation CreateMaterial($input: CreateMaterialInput!) {
        createMaterial(input: $input) {
            id
            name
        }
    }
`;

export default function AddMaterialForm({ taskId, onAdded }) {
    const [newMaterial, setNewMaterial] = useState({
        name: "",
        description: "",
        materialTypeId: "",
        usageRestrictionId: "",
        licenceTypeId: "",
        targetAudienceId: "",
        languageId: "",
        keywordIds: []
    });

    const { loading, error, data, refetch } = useQuery(GET_MATERIAL_REFERENCE_DATA);
    const [createMaterial] = useMutation(CREATE_MATERIAL);
    const [createKeyword] = useMutation(CREATE_KEYWORD);

    if (loading) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–≤—ñ–¥–Ω–∏–∫—ñ–≤...</p>;
    if (error) return <p>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ: {error.message}</p>;

    const handleChange = (e) => {
        const { name, value } = e.target;
        setNewMaterial((prev) => ({ ...prev, [name]: value }));
    };

    const handleAddMaterial = async (e) => {
        e.preventDefault();

        try {
            await executeMutation(createMaterial, {
                variables: {
                    input: {
                        ...newMaterial,
                        materialTypeId: parseInt(newMaterial.materialTypeId),
                        usageRestrictionId: newMaterial.usageRestrictionId ? parseInt(newMaterial.usageRestrictionId) : null,
                        licenceTypeId: newMaterial.licenceTypeId ? parseInt(newMaterial.licenceTypeId) : null,
                        targetAudienceId: newMaterial.targetAudienceId ? parseInt(newMaterial.targetAudienceId) : null,
                        languageId: newMaterial.languageId ? parseInt(newMaterial.languageId) : null,
                        keywordIds: newMaterial.keywordIds.map((id) => parseInt(id)),
                        taskId: parseInt(taskId),
                    },
                },
                successMessage: "‚úÖ –ú–∞—Ç–µ—Ä—ñ–∞–ª —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!",
                errorMessage: "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª",
                onSuccess: () => {
                    setNewMaterial({
                        name: "",
                        description: "",
                        materialTypeId: "",
                        usageRestrictionId: "",
                        licenceTypeId: "",
                        targetAudienceId: "",
                        languageId: "",
                        keywordIds: []
                    });

                    if (onAdded) onAdded();
                }
            });
        } catch (err) {
            // executeMutation already handles the error display
            console.error("Error creating material:", err);
        }
    };

    const keywordOptions = data.keywords.map((kw) => ({ value: kw.id, label: kw.name }));

    const handleKeywordChange = async (selected) => {
        const existing = selected.filter(opt => !opt.__isNew__);
        const toCreate = selected.filter(opt => opt.__isNew__);

        const newIds = [...existing.map(k => k.value)];

        for (const kw of toCreate) {
            try {
                const result = await executeMutation(createKeyword, {
                    variables: { input: { name: kw.label } },
                    successMessage: `–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ "${kw.label}" —Å—Ç–≤–æ—Ä–µ–Ω–æ`,
                    showSuccessToast: false // Don't show for each keyword to avoid spam
                });

                if (result?.data?.createKeyword?.id) {
                    newIds.push(result.data.createKeyword.id);
                }
            } catch (err) {
                // executeMutation already handles the error display
                console.error("Error creating keyword:", err);
            }
        }

        setNewMaterial((prev) => ({ ...prev, keywordIds: newIds }));
    };

    return (
        <div>
            <h6>‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª</h6>
            <form className="mt-2" onSubmit={handleAddMaterial}>
                <div className="mb-2">
                    <label className="form-label">–ù–∞–∑–≤–∞</label>
                    <input
                        type="text"
                        className="form-control"
                        name="name"
                        value={newMaterial.name}
                        onChange={handleChange}
                        required
                    />
                </div>

                <div className="mb-2">
                    <label className="form-label">–û–ø–∏—Å</label>
                    <textarea
                        className="form-control"
                        name="description"
                        value={newMaterial.description}
                        onChange={handleChange}
                        rows="2"
                    />
                </div>

                <SelectWithCreate label="–¢–∏–ø –º–∞—Ç–µ—Ä—ñ–∞–ª—É" options={data.materialTypes} value={newMaterial.materialTypeId} onChange={(val) => setNewMaterial((prev) => ({ ...prev, materialTypeId: val }))} createMutation={CREATE_MATERIAL_TYPE} refetchOptions={refetch} />

                <SelectWithCreate label="–¢–∏–ø –ª—ñ—Ü–µ–Ω–∑—ñ—ó" options={data.licenceTypes} value={newMaterial.licenceTypeId} onChange={(val) => setNewMaterial((prev) => ({ ...prev, licenceTypeId: val }))} createMutation={CREATE_LICENCE_TYPE} refetchOptions={refetch} />

                <SelectWithCreate label="–û–±–º–µ–∂–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è" options={data.usageRestrictions} value={newMaterial.usageRestrictionId} onChange={(val) => setNewMaterial((prev) => ({ ...prev, usageRestrictionId: val }))} createMutation={CREATE_USAGE_RESTRICTION} refetchOptions={refetch} />

                <SelectWithCreate label="–¶—ñ–ª—å–æ–≤–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—è" options={data.targetAudiences} value={newMaterial.targetAudienceId} onChange={(val) => setNewMaterial((prev) => ({ ...prev, targetAudienceId: val }))} createMutation={CREATE_TARGET_AUDIENCE} refetchOptions={refetch} />

                <SelectWithCreate label="–ú–æ–≤–∞" options={data.languages} value={newMaterial.languageId} onChange={(val) => setNewMaterial((prev) => ({ ...prev, languageId: val }))} createMutation={CREATE_LANGUAGE} refetchOptions={refetch} />

                <div className="mb-2">
                    <label className="form-label">–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞</label>
                    <CreatableSelect
                        isMulti
                        placeholder="–û–±–µ—Ä—ñ—Ç—å –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞"
                        onChange={handleKeywordChange}
                        options={keywordOptions}
                    />
                </div>

                <button type="submit" className="btn btn-sm btn-primary mt-3">
                    üíæ –î–æ–¥–∞—Ç–∏
                </button>
            </form>
        </div>
    );
}